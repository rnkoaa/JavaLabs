package com.richard.akka;

import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;

import akka.actor.AbstractActor;
import akka.actor.ActorRef;
import akka.actor.ActorSystem;
import akka.actor.Props;
import akka.event.Logging;
import akka.event.LoggingAdapter;
import akka.japi.pf.ReceiveBuilder;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'u0165547' at '7/28/16 9:20 AM' with Gradle 2.13
 *
 * @author u0165547, @date 7/28/16 9:20 AM
 */
public class Application {
	public static void main(String[] args) {
		final Config config = ConfigFactory.load();
		// ActorSystem is a heavy object: create only one per application
		final ActorSystem system = ActorSystem.create("MySystem", config);
		final ActorRef myActor = system.actorOf(Props.create(MyActor.class, "This is My Message"), "MyActor");

		for (int index = 0; index < 10; index++) {
			myActor.tell("Hello, World", ActorRef.noSender());
		}
	}

	public static class MyActor extends AbstractActor {
		private final LoggingAdapter log = Logging.getLogger(context().system(), this);

		static Props props(String message) {
			// You need to specify the actual type of the returned actor
			// since Java 8 lambdas have some runtime type information erased
			return Props.create(MyActor.class, () -> new MyActor(message));
		}

		public MyActor(String message) {
			// this.message = message;
			receive(ReceiveBuilder.match(String.class, s -> {
				log.info("{}: {}", message, s);
			}).matchAny(o -> log.info("received unknown message")).build());
		}
	}
}
